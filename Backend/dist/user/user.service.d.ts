import { ConfigService } from '@nestjs/config';
import { Achievement, UserStatus } from '@prisma/client';
import { PrismaService } from 'src/prisma/prisma.service';
import { UserDto } from './dto';
import { S3 } from 'aws-sdk';
export declare class UserService {
    private prisma;
    private config;
    constructor(prisma: PrismaService, config: ConfigService);
    change_full_name(user: any, new_full_name: string, res: any): Promise<void>;
    get_user_all(user_obj: UserDto, res: any): Promise<void>;
    get_me(user_obj: UserDto, res: any): Promise<void>;
    get_which_friend(user_obj: any, which_friend: string, res: any): Promise<void>;
    get_user_score(user_obj: UserDto, res: any): Promise<void>;
    get_user(req_id: string): Promise<import(".prisma/client").User>;
    update_user_score(user: any, score: number): Promise<import(".prisma/client").User>;
    update_user_achievements(user: any, achievement: Achievement): Promise<any>;
    edit_user_status(user: UserDto, status: UserStatus): Promise<void>;
    get_user_achievements(user_obj: UserDto, res: any): Promise<void>;
    get_leaderboard(res: any): Promise<void>;
    add_friend(user_rep: any, friend_name: string, res: any): Promise<void>;
    create_dm_room(user: any, friend: any): Promise<void>;
    delete_dm_room(user_id: any, friend_id: any): Promise<void>;
    get_friends(user: UserDto, res: any): Promise<void>;
    upload(user_obj: UserDto, file: any): Promise<S3.ManagedUpload.SendData>;
    uploadS3(user: any, file: any, bucket: any, name: any): Promise<S3.ManagedUpload.SendData>;
    getS3(): S3;
    upload_avatar(user: any, avatar_link: string, bucket: any, s3: any, data_key: string): Promise<void>;
    get_user_friends(user: UserDto, res: any): Promise<void>;
    remove_friend(user: any, friend_name: string, res: any): Promise<void>;
    block_friend(user_req: any, friend_name: string, res: any): Promise<void>;
    status_friend(user_req: any, friend_name: string, res: any): Promise<void>;
    unblock_friend(user_req: any, friend_name: string, res: any): Promise<void>;
    get_history(user_req: any, username: string, res: any): Promise<void>;
}
